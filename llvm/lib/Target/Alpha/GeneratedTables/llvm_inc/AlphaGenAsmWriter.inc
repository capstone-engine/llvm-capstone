/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
std::pair<const char *, uint64_t> AlphaInstPrinter::getMnemonic(const MCInst *MI) {

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "EXTBL \0"
  /* 7 */ "EXTLL \0"
  /* 14 */ "EXTWL \0"
  /* 21 */ "; ADJDOWN \0"
  /* 32 */ "CTPOP \0"
  /* 39 */ "; ADJUP \0"
  /* 48 */ "CTLZ \0"
  /* 54 */ "CTTZ \0"
  /* 60 */ "lda \0"
  /* 65 */ "sra \0"
  /* 70 */ "stb \0"
  /* 75 */ "sextb \0"
  /* 82 */ "blbc \0"
  /* 88 */ "cmovlbc \0"
  /* 97 */ "rpcc \0"
  /* 103 */ "bic \0"
  /* 108 */ "cvttq/svc \0"
  /* 119 */ "and \0"
  /* 124 */ "fbge \0"
  /* 130 */ "cmpbge \0"
  /* 138 */ "fcmovge \0"
  /* 147 */ "fble \0"
  /* 153 */ "cmple \0"
  /* 160 */ "cmpule \0"
  /* 168 */ "fcmovle \0"
  /* 177 */ "fbne \0"
  /* 183 */ "jsr_coroutine \0"
  /* 198 */ "fcmovne \0"
  /* 207 */ "cpyse \0"
  /* 214 */ "ldah \0"
  /* 220 */ "umulh \0"
  /* 227 */ "cvtqs/sui \0"
  /* 238 */ "cvtts/sui \0"
  /* 249 */ "cvtqt/sui \0"
  /* 260 */ "ldl_l \0"
  /* 267 */ "stl_l \0"
  /* 274 */ "ldq_l \0"
  /* 281 */ "stq_l \0"
  /* 288 */ "s4subl \0"
  /* 296 */ "s8subl \0"
  /* 304 */ "s4addl \0"
  /* 312 */ "s8addl \0"
  /* 320 */ "ldl \0"
  /* 325 */ "sll \0"
  /* 330 */ "mull \0"
  /* 336 */ "srl \0"
  /* 341 */ "stl \0"
  /* 346 */ "cpysn \0"
  /* 353 */ "s4subq \0"
  /* 361 */ "s8subq \0"
  /* 369 */ "s4addq \0"
  /* 377 */ "s8addq \0"
  /* 385 */ "ldq \0"
  /* 390 */ "fbeq \0"
  /* 396 */ "cmpeq \0"
  /* 403 */ "fcmoveq \0"
  /* 412 */ "mulq \0"
  /* 418 */ "stq \0"
  /* 423 */ "xor \0"
  /* 428 */ "cvtst/s \0"
  /* 437 */ "blbs \0"
  /* 443 */ "cmovlbs \0"
  /* 452 */ "lds \0"
  /* 457 */ "itofs \0"
  /* 464 */ "bis \0"
  /* 469 */ "ftois \0"
  /* 476 */ "sts \0"
  /* 481 */ "cpys \0"
  /* 487 */ "ldt \0"
  /* 492 */ "itoft \0"
  /* 499 */ "fbgt \0"
  /* 505 */ "fcmovgt \0"
  /* 514 */ "ftoit \0"
  /* 521 */ "fblt \0"
  /* 527 */ "cmplt \0"
  /* 534 */ "cmpult \0"
  /* 542 */ "fcmovlt \0"
  /* 551 */ "zapnot \0"
  /* 559 */ "ornot \0"
  /* 566 */ "stt \0"
  /* 571 */ "ldbu \0"
  /* 577 */ "cmptle/su \0"
  /* 588 */ "cmptun/su \0"
  /* 599 */ "cmpteq/su \0"
  /* 610 */ "subs/su \0"
  /* 619 */ "adds/su \0"
  /* 628 */ "muls/su \0"
  /* 637 */ "sqrts/su \0"
  /* 647 */ "divs/su \0"
  /* 656 */ "subt/su \0"
  /* 665 */ "addt/su \0"
  /* 674 */ "cmptlt/su \0"
  /* 685 */ "mult/su \0"
  /* 694 */ "sqrtt/su \0"
  /* 704 */ "divt/su \0"
  /* 713 */ "ldwu \0"
  /* 719 */ "eqv \0"
  /* 724 */ "stw \0"
  /* 729 */ "sextw \0"
  /* 736 */ "bsr $26,$\0"
  /* 746 */ "LSMARKER$\0"
  /* 756 */ "jmp $31,(\0"
  /* 766 */ "br $31,\0"
  /* 774 */ "# XRay Function Patchable RET.\0"
  /* 805 */ "# XRay Typed Event Log.\0"
  /* 829 */ "# XRay Custom Event Log.\0"
  /* 854 */ "# XRay Function Enter.\0"
  /* 877 */ "# XRay Tail Call Exit.\0"
  /* 900 */ "# XRay Function Exit.\0"
  /* 922 */ "jsr $23,($27),0\0"
  /* 938 */ "jsr $26,($27),0\0"
  /* 954 */ "ret $31,($26),1\0"
  /* 970 */ "swap32\0"
  /* 977 */ "cas32\0"
  /* 983 */ "las32\0"
  /* 989 */ "swap64\0"
  /* 996 */ "cas64\0"
  /* 1002 */ "las64\0"
  /* 1008 */ ":comment COND_BRANCH imm:\0"
  /* 1034 */ "LIFETIME_END\0"
  /* 1047 */ "PSEUDO_PROBE\0"
  /* 1060 */ "BUNDLE\0"
  /* 1067 */ "DBG_VALUE\0"
  /* 1077 */ "DBG_INSTR_REF\0"
  /* 1091 */ "DBG_PHI\0"
  /* 1099 */ "DBG_LABEL\0"
  /* 1109 */ "LIFETIME_START\0"
  /* 1124 */ "DBG_VALUE_LIST\0"
  /* 1139 */ "PCMARKER_\0"
  /* 1149 */ "wmb\0"
  /* 1153 */ "#wtf\0"
  /* 1158 */ "# FEntry call\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint16_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1068U,	// DBG_VALUE
    1125U,	// DBG_VALUE_LIST
    1078U,	// DBG_INSTR_REF
    1092U,	// DBG_PHI
    1100U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1061U,	// BUNDLE
    1110U,	// LIFETIME_START
    1035U,	// LIFETIME_END
    1048U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    1159U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    855U,	// PATCHABLE_FUNCTION_ENTER
    775U,	// PATCHABLE_RET
    901U,	// PATCHABLE_FUNCTION_EXIT
    878U,	// PATCHABLE_TAIL_CALL
    830U,	// PATCHABLE_EVENT_CALL
    806U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    2355U,	// ADDLi
    2355U,	// ADDLr
    2420U,	// ADDQi
    2420U,	// ADDQr
    2668U,	// ADDS
    2714U,	// ADDT
    12310U,	// ADJUSTSTACKDOWN
    12328U,	// ADJUSTSTACKUP
    21225U,	// ALTENT
    2168U,	// ANDi
    2168U,	// ANDr
    2440U,	// BEQ
    2174U,	// BGE
    2549U,	// BGT
    2152U,	// BICi
    2152U,	// BICr
    2513U,	// BISi
    2513U,	// BISr
    2131U,	// BLBC
    2486U,	// BLBS
    2197U,	// BLE
    2571U,	// BLT
    2227U,	// BNE
    13055U,	// BR
    29409U,	// BSR
    978U,	// CAS32
    997U,	// CAS64
    2453U,	// CMOVEQi
    2453U,	// CMOVEQr
    2188U,	// CMOVGEi
    2188U,	// CMOVGEr
    2555U,	// CMOVGTi
    2555U,	// CMOVGTr
    2137U,	// CMOVLBCi
    2137U,	// CMOVLBCr
    2492U,	// CMOVLBSi
    2492U,	// CMOVLBSr
    2218U,	// CMOVLEi
    2218U,	// CMOVLEr
    2592U,	// CMOVLTi
    2592U,	// CMOVLTr
    2248U,	// CMOVNEi
    2248U,	// CMOVNEr
    2179U,	// CMPBGE
    2179U,	// CMPBGEi
    2445U,	// CMPEQ
    2445U,	// CMPEQi
    2202U,	// CMPLE
    2202U,	// CMPLEi
    2576U,	// CMPLT
    2576U,	// CMPLTi
    2648U,	// CMPTEQ
    2626U,	// CMPTLE
    2723U,	// CMPTLT
    2637U,	// CMPTUN
    2209U,	// CMPULE
    2209U,	// CMPULEi
    2583U,	// CMPULT
    2583U,	// CMPULTi
    37873U,	// COND_BRANCH_F
    46065U,	// COND_BRANCH_I
    2256U,	// CPYSES
    2256U,	// CPYSESt
    2256U,	// CPYSET
    2395U,	// CPYSNS
    2395U,	// CPYSNSt
    2395U,	// CPYSNT
    2395U,	// CPYSNTs
    2530U,	// CPYSS
    2530U,	// CPYSSt
    2530U,	// CPYST
    2530U,	// CPYSTs
    51249U,	// CTLZ
    51233U,	// CTPOP
    51255U,	// CTTZ
    51428U,	// CVTQS
    51450U,	// CVTQT
    51629U,	// CVTST
    51309U,	// CVTTQ
    51439U,	// CVTTS
    2696U,	// DIVS
    2753U,	// DIVT
    2768U,	// EQVi
    2768U,	// EQVr
    2049U,	// EXTBL
    2056U,	// EXTLL
    2063U,	// EXTWL
    2439U,	// FBEQ
    2173U,	// FBGE
    2548U,	// FBGT
    2196U,	// FBLE
    2570U,	// FBLT
    2226U,	// FBNE
    6548U,	// FCMOVEQS
    6548U,	// FCMOVEQT
    6283U,	// FCMOVGES
    6283U,	// FCMOVGET
    6650U,	// FCMOVGTS
    6650U,	// FCMOVGTT
    6313U,	// FCMOVLES
    6313U,	// FCMOVLET
    6687U,	// FCMOVLTS
    6687U,	// FCMOVLTT
    6343U,	// FCMOVNES
    6343U,	// FCMOVNET
    51670U,	// FTOIS
    51715U,	// FTOIT
    51658U,	// ITOFS
    51693U,	// ITOFT
    62197U,	// JMP
    939U,	// JSR
    4280U,	// JSR_COROUTINE
    923U,	// JSRs
    984U,	// LAS32
    1003U,	// LAS64
    12349U,	// LDA
    12503U,	// LDAH
    20695U,	// LDAHg
    12503U,	// LDAHr
    20541U,	// LDAg
    12349U,	// LDAr
    12860U,	// LDBU
    12860U,	// LDBUr
    12609U,	// LDL
    12549U,	// LDL_L
    12609U,	// LDLr
    12674U,	// LDQ
    12563U,	// LDQ_L
    12674U,	// LDQl
    12674U,	// LDQr
    12741U,	// LDS
    12741U,	// LDSr
    12776U,	// LDT
    12776U,	// LDTr
    13002U,	// LDWU
    13002U,	// LDWUr
    1151U,	// MB
    29419U,	// MEMLABEL
    2379U,	// MULLi
    2379U,	// MULLr
    2461U,	// MULQi
    2461U,	// MULQr
    2677U,	// MULS
    2734U,	// MULT
    2608U,	// ORNOTi
    2608U,	// ORNOTr
    38004U,	// PCLABEL
    955U,	// RETDAG
    955U,	// RETDAGp
    12386U,	// RPCC
    2353U,	// S4ADDLi
    2353U,	// S4ADDLr
    2418U,	// S4ADDQi
    2418U,	// S4ADDQr
    2337U,	// S4SUBLi
    2337U,	// S4SUBLr
    2402U,	// S4SUBQi
    2402U,	// S4SUBQr
    2361U,	// S8ADDLi
    2361U,	// S8ADDLr
    2426U,	// S8ADDQi
    2426U,	// S8ADDQr
    2345U,	// S8SUBLi
    2345U,	// S8SUBLr
    2410U,	// S8SUBQi
    2410U,	// S8SUBQr
    51276U,	// SEXTB
    51930U,	// SEXTW
    2374U,	// SLi
    2374U,	// SLr
    51838U,	// SQRTS
    51895U,	// SQRTT
    2114U,	// SRAi
    2114U,	// SRAr
    2385U,	// SRLi
    2385U,	// SRLr
    12359U,	// STB
    12359U,	// STBr
    12630U,	// STL
    2316U,	// STL_C
    12630U,	// STLr
    12707U,	// STQ
    2330U,	// STQ_C
    12707U,	// STQr
    12765U,	// STS
    12765U,	// STSr
    12855U,	// STT
    12855U,	// STTr
    13013U,	// STW
    13013U,	// STWr
    2339U,	// SUBLi
    2339U,	// SUBLr
    2404U,	// SUBQi
    2404U,	// SUBQr
    2659U,	// SUBS
    2705U,	// SUBT
    971U,	// SWAP32
    990U,	// SWAP64
    2269U,	// UMULHi
    2269U,	// UMULHr
    1150U,	// WMB
    1154U,	// WTF
    2472U,	// XORi
    2472U,	// XORr
    2600U,	// ZAPNOTi
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ADDLi
    0U,	// ADDLr
    0U,	// ADDQi
    0U,	// ADDQr
    0U,	// ADDS
    0U,	// ADDT
    0U,	// ADJUSTSTACKDOWN
    0U,	// ADJUSTSTACKUP
    0U,	// ALTENT
    0U,	// ANDi
    0U,	// ANDr
    2U,	// BEQ
    2U,	// BGE
    2U,	// BGT
    0U,	// BICi
    0U,	// BICr
    0U,	// BISi
    0U,	// BISr
    2U,	// BLBC
    2U,	// BLBS
    2U,	// BLE
    2U,	// BLT
    2U,	// BNE
    0U,	// BR
    0U,	// BSR
    0U,	// CAS32
    0U,	// CAS64
    0U,	// CMOVEQi
    0U,	// CMOVEQr
    0U,	// CMOVGEi
    0U,	// CMOVGEr
    0U,	// CMOVGTi
    0U,	// CMOVGTr
    0U,	// CMOVLBCi
    0U,	// CMOVLBCr
    0U,	// CMOVLBSi
    0U,	// CMOVLBSr
    0U,	// CMOVLEi
    0U,	// CMOVLEr
    0U,	// CMOVLTi
    0U,	// CMOVLTr
    0U,	// CMOVNEi
    0U,	// CMOVNEr
    0U,	// CMPBGE
    0U,	// CMPBGEi
    0U,	// CMPEQ
    0U,	// CMPEQi
    0U,	// CMPLE
    0U,	// CMPLEi
    0U,	// CMPLT
    0U,	// CMPLTi
    0U,	// CMPTEQ
    0U,	// CMPTLE
    0U,	// CMPTLT
    0U,	// CMPTUN
    0U,	// CMPULE
    0U,	// CMPULEi
    0U,	// CMPULT
    0U,	// CMPULTi
    0U,	// COND_BRANCH_F
    0U,	// COND_BRANCH_I
    0U,	// CPYSES
    0U,	// CPYSESt
    0U,	// CPYSET
    0U,	// CPYSNS
    0U,	// CPYSNSt
    0U,	// CPYSNT
    0U,	// CPYSNTs
    0U,	// CPYSS
    0U,	// CPYSSt
    0U,	// CPYST
    0U,	// CPYSTs
    0U,	// CTLZ
    0U,	// CTPOP
    0U,	// CTTZ
    0U,	// CVTQS
    0U,	// CVTQT
    0U,	// CVTST
    0U,	// CVTTQ
    0U,	// CVTTS
    0U,	// DIVS
    0U,	// DIVT
    0U,	// EQVi
    0U,	// EQVr
    0U,	// EXTBL
    0U,	// EXTLL
    0U,	// EXTWL
    2U,	// FBEQ
    2U,	// FBGE
    2U,	// FBGT
    2U,	// FBLE
    2U,	// FBLT
    2U,	// FBNE
    0U,	// FCMOVEQS
    0U,	// FCMOVEQT
    0U,	// FCMOVGES
    0U,	// FCMOVGET
    0U,	// FCMOVGTS
    0U,	// FCMOVGTT
    0U,	// FCMOVLES
    0U,	// FCMOVLET
    0U,	// FCMOVLTS
    0U,	// FCMOVLTT
    0U,	// FCMOVNES
    0U,	// FCMOVNET
    0U,	// FTOIS
    0U,	// FTOIT
    0U,	// ITOFS
    0U,	// ITOFT
    0U,	// JMP
    0U,	// JSR
    1U,	// JSR_COROUTINE
    0U,	// JSRs
    0U,	// LAS32
    0U,	// LAS64
    5U,	// LDA
    5U,	// LDAH
    1U,	// LDAHg
    7U,	// LDAHr
    1U,	// LDAg
    9U,	// LDAr
    5U,	// LDBU
    9U,	// LDBUr
    5U,	// LDL
    5U,	// LDL_L
    9U,	// LDLr
    5U,	// LDQ
    5U,	// LDQ_L
    11U,	// LDQl
    9U,	// LDQr
    5U,	// LDS
    9U,	// LDSr
    5U,	// LDT
    9U,	// LDTr
    5U,	// LDWU
    9U,	// LDWUr
    0U,	// MB
    1U,	// MEMLABEL
    0U,	// MULLi
    0U,	// MULLr
    0U,	// MULQi
    0U,	// MULQr
    0U,	// MULS
    0U,	// MULT
    0U,	// ORNOTi
    0U,	// ORNOTr
    1U,	// PCLABEL
    0U,	// RETDAG
    0U,	// RETDAGp
    0U,	// RPCC
    0U,	// S4ADDLi
    0U,	// S4ADDLr
    0U,	// S4ADDQi
    0U,	// S4ADDQr
    0U,	// S4SUBLi
    0U,	// S4SUBLr
    0U,	// S4SUBQi
    0U,	// S4SUBQr
    0U,	// S8ADDLi
    0U,	// S8ADDLr
    0U,	// S8ADDQi
    0U,	// S8ADDQr
    0U,	// S8SUBLi
    0U,	// S8SUBLr
    0U,	// S8SUBQi
    0U,	// S8SUBQr
    0U,	// SEXTB
    0U,	// SEXTW
    0U,	// SLi
    0U,	// SLr
    0U,	// SQRTS
    0U,	// SQRTT
    0U,	// SRAi
    0U,	// SRAr
    0U,	// SRLi
    0U,	// SRLr
    5U,	// STB
    9U,	// STBr
    5U,	// STL
    12U,	// STL_C
    9U,	// STLr
    5U,	// STQ
    12U,	// STQ_C
    9U,	// STQr
    5U,	// STS
    9U,	// STSr
    5U,	// STT
    9U,	// STTr
    5U,	// STW
    9U,	// STWr
    0U,	// SUBLi
    0U,	// SUBLr
    0U,	// SUBQi
    0U,	// SUBQr
    0U,	// SUBS
    0U,	// SUBT
    0U,	// SWAP32
    0U,	// SWAP64
    0U,	// UMULHi
    0U,	// UMULHr
    0U,	// WMB
    0U,	// WTF
    0U,	// XORi
    0U,	// XORr
    0U,	// ZAPNOTi
  };

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MI->getOpcode()] << 0;
  Bits |= OpInfo1[MI->getOpcode()] << 16;
  return {AsmStrs+(Bits & 2047)-1, Bits};

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
LLVM_NO_PROFILE_INSTRUMENT_FUNCTION
void AlphaInstPrinter::printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O) {
  O << "\t";

  auto MnemonicInfo = getMnemonic(MI);

  O << MnemonicInfo.first;

  uint32_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 11) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ADDLi, ADDLr, ADDQi, ADDQr, ADDS, ADDT, ANDi, ANDr, BEQ, BGE, BGT, BIC...
    printOperand(MI, 1, O);
    SStream_concat1(O, ',');
    break;
  case 2:
    // ADJUSTSTACKDOWN, ADJUSTSTACKUP, ALTENT, BR, BSR, COND_BRANCH_F, COND_B...
    printOperand(MI, 0, O);
    break;
  case 3:
    // FCMOVEQS, FCMOVEQT, FCMOVGES, FCMOVGET, FCMOVGTS, FCMOVGTT, FCMOVLES, ...
    printOperand(MI, 3, O);
    SStream_concat1(O, ',');
    printOperand(MI, 2, O);
    SStream_concat1(O, ',');
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 13) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADDLi, ADDLr, ADDQi, ADDQr, ADDS, ADDT, ANDi, ANDr, BEQ, BGE, BGT, BIC...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADJUSTSTACKDOWN, ADJUSTSTACKUP, BR, RPCC
    return;
    break;
  case 2:
    // ALTENT
    SStream_concat0(O, "..ng:\n");
    return;
    break;
  case 3:
    // BSR
    SStream_concat0(O, "..ng");
    return;
    break;
  case 4:
    // COND_BRANCH_F
    SStream_concat0(O, ", F8RC:");
    printOperand(MI, 1, O);
    SStream_concat0(O, ", bb:");
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // COND_BRANCH_I
    SStream_concat0(O, ", GPRC:");
    printOperand(MI, 1, O);
    SStream_concat0(O, ", bb:");
    printOperand(MI, 2, O);
    return;
    break;
  case 6:
    // CTLZ, CTPOP, CTTZ, CVTQS, CVTQT, CVTST, CVTTQ, CVTTS, FTOIS, FTOIT, IT...
    printOperand(MI, 0, O);
    return;
    break;
  case 7:
    // JMP
    SStream_concat0(O, "),0");
    return;
    break;
  case 8:
    // JSR_COROUTINE
    SStream_concat0(O, ",(");
    printOperand(MI, 1, O);
    SStream_concat0(O, "),");
    printOperand(MI, 2, O);
    return;
    break;
  case 9:
    // LDA, LDAH, LDAHr, LDAr, LDBU, LDBUr, LDL, LDL_L, LDLr, LDQ, LDQ_L, LDQ...
    SStream_concat1(O, ',');
    printOperand(MI, 1, O);
    SStream_concat1(O, '(');
    printOperand(MI, 2, O);
    break;
  case 10:
    // LDAHg, LDAg
    SStream_concat0(O, ",0(");
    printOperand(MI, 2, O);
    SStream_concat0(O, ")\t\t!gpdisp!");
    printOperand(MI, 3, O);
    return;
    break;
  case 11:
    // MEMLABEL
    SStream_concat1(O, '$');
    printOperand(MI, 1, O);
    SStream_concat1(O, '$');
    printOperand(MI, 2, O);
    SStream_concat1(O, '$');
    printOperand(MI, 3, O);
    SStream_concat1(O, ':');
    return;
    break;
  case 12:
    // PCLABEL
    SStream_concat0(O, ":\n");
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 17) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADDLi, ADDLr, ADDQi, ADDQr, ADDS, ADDT, ANDi, ANDr, BICi, BICr, BISi, ...
    SStream_concat1(O, ',');
    printOperand(MI, 0, O);
    return;
    break;
  case 1:
    // BEQ, BGE, BGT, BLBC, BLBS, BLE, BLT, BNE, FBEQ, FBGE, FBGT, FBLE, FBLT...
    return;
    break;
  case 2:
    // LDA, LDAH, LDBU, LDL, LDL_L, LDQ, LDQ_L, LDS, LDT, LDWU, STB, STL, STQ...
    SStream_concat1(O, ')');
    return;
    break;
  case 3:
    // LDAHr
    SStream_concat0(O, ")\t\t!gprelhigh");
    return;
    break;
  case 4:
    // LDAr, LDBUr, LDLr, LDQr, LDSr, LDTr, LDWUr, STBr, STLr, STQr, STSr, ST...
    SStream_concat0(O, ")\t\t!gprellow");
    return;
    break;
  case 5:
    // LDQl
    SStream_concat0(O, ")\t\t!literal");
    return;
    break;
  case 6:
    // STL_C, STQ_C
    SStream_concat1(O, '(');
    printOperand(MI, 3, O);
    SStream_concat1(O, ')');
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AlphaInstPrinter::getRegisterName(MCRegister Reg) {
  unsigned RegNo = Reg.id();
  assert(RegNo && RegNo < 65 && "Invalid register number!");


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "$0\0"
  /* 3 */ "$10\0"
  /* 7 */ "$f10\0"
  /* 12 */ "$20\0"
  /* 16 */ "$f20\0"
  /* 21 */ "$30\0"
  /* 25 */ "$f30\0"
  /* 30 */ "$f0\0"
  /* 34 */ "$1\0"
  /* 37 */ "$11\0"
  /* 41 */ "$f11\0"
  /* 46 */ "$21\0"
  /* 50 */ "$f21\0"
  /* 55 */ "$31\0"
  /* 59 */ "$f31\0"
  /* 64 */ "$f1\0"
  /* 68 */ "$2\0"
  /* 71 */ "$12\0"
  /* 75 */ "$f12\0"
  /* 80 */ "$22\0"
  /* 84 */ "$f22\0"
  /* 89 */ "$f2\0"
  /* 93 */ "$3\0"
  /* 96 */ "$13\0"
  /* 100 */ "$f13\0"
  /* 105 */ "$23\0"
  /* 109 */ "$f23\0"
  /* 114 */ "$f3\0"
  /* 118 */ "$4\0"
  /* 121 */ "$14\0"
  /* 125 */ "$f14\0"
  /* 130 */ "$24\0"
  /* 134 */ "$f24\0"
  /* 139 */ "$f4\0"
  /* 143 */ "$5\0"
  /* 146 */ "$15\0"
  /* 150 */ "$f15\0"
  /* 155 */ "$25\0"
  /* 159 */ "$f25\0"
  /* 164 */ "$f5\0"
  /* 168 */ "$6\0"
  /* 171 */ "$16\0"
  /* 175 */ "$f16\0"
  /* 180 */ "$26\0"
  /* 184 */ "$f26\0"
  /* 189 */ "$f6\0"
  /* 193 */ "$7\0"
  /* 196 */ "$17\0"
  /* 200 */ "$f17\0"
  /* 205 */ "$27\0"
  /* 209 */ "$f27\0"
  /* 214 */ "$f7\0"
  /* 218 */ "$8\0"
  /* 221 */ "$18\0"
  /* 225 */ "$f18\0"
  /* 230 */ "$28\0"
  /* 234 */ "$f28\0"
  /* 239 */ "$f8\0"
  /* 243 */ "$9\0"
  /* 246 */ "$19\0"
  /* 250 */ "$f19\0"
  /* 255 */ "$29\0"
  /* 259 */ "$f29\0"
  /* 264 */ "$f9\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint16_t RegAsmOffset[] = {
    30, 64, 89, 114, 139, 164, 189, 214, 239, 264, 7, 41, 75, 100, 
    125, 150, 175, 200, 225, 250, 16, 50, 84, 109, 134, 159, 184, 209, 
    234, 259, 25, 59, 0, 34, 68, 93, 118, 143, 168, 193, 218, 243, 
    3, 37, 71, 96, 121, 146, 171, 196, 221, 246, 12, 46, 80, 105, 
    130, 155, 180, 205, 230, 255, 21, 55, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool AlphaInstPrinter::printAliasInstr(const MCInst *MI, uint64_t Address, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
